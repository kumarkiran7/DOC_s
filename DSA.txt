* LINEAR DATA STRUCTURE :
	1.STACK, 2.QUEUE, 3.CIRCULAR QUEUE, 4.LINKED LIST, and 5.Arrays.

* NON-LINEAR DATA STRUCTURE :
	1.Tree, 2.Graph


1. STACK:
-> STACK IS A LINEAR DATA STRUCTURE.
-> STACK IS 'LIFO'.
-> IN STACK INSERTION WILL TAKE PALCE AT TOP.
-> IN STACK DELETION WILL TAKE PALCE AT TOP.
-> THE OPERATIONS IN STACK :

	1.POP ->	IT REMOVES THE ELEMENT ON TOP 
	2.PUSH ->	IT PUSHES(or)ADD THE ELEMENT INTO STACK 
	3.ISEMPTY ->IT CHECKS IF THE STACK IS EMPTY OR NO
	4.ISFULL -> IT CHECKS IF THE STACK IS FULL OR NO
	5.PEEK ->   IT RETURN THE ELEMENT AT THE GIVEN POSITION
	6.COUNT ->  IT RETURN HOW MANY ELEMENTS IN THE STACK
	7.DISPLAY ->IT DISPLAYS AL THE ELEMENTS IN THE STACK
	8.CHANGE -> IT CHANGES THE ELEMENT IN THE POSITION

2. QUEUE:
-> QUEUE IS A LINEAR DATA STRUCTURE.
-> QUEUE IS 'FIFO'.
-> IN QUEUE INSERTION WILL TAKE PALCE AT REAR.
-> IN QUEUE DELETION WILL TAKE PALCE AT FRONT.
-> THE OPERATIONS IN QUEUE :

	1.ENQUEUE -> IT INSERT THE ELEMENT TO QUEUE AT REAR END
	2.DEQUEUE -> IT DELETE THE ELEMENT FROM QUEUE AT FRONT END 
	3.FRONT   -> IT RETURN THE ELEMENT IN THE FRONT
	4.REAR    -> IT RETURN THE ELEMENT IN THE REAR



3. CIRCULAR QUEUE:
-> A CIRCULAR QUEUE IS A EXTENDED VERSION OF A NORMAL QUEUE WHERE THE LAST ELEMENT OF THE QUEUE
   IS CONNECTED TO FIRST ELEMENT OF THE QUEUE FORMING A CIRCLE.
-> THE CIRCULAR QUEUE SOLVES THE MAJOR LIMITATION OF THE NORMAL QUEUE.
-> IN NORMAL QUEUE, AFTER A BIT OF INSERTION AND DELETION, THERE WILL BE NON-USABLE EMPTY SPACE.
-> ONCE AN ELEMENT IS DELETED, WE CANNOT INSERT ANOTHER ELEMENT IN ITS POSITION.
-> OPERATIONS ON CIRCULAR QUEUE :

	1.ENQUEUE -> IT INSERT THE ELEMENT TO CIRCULAR QUEUE AT REAR END
		    -> CHECK WHETHER THE QUEUE IS FULL [i.e THE REAR END IS IN JUST BEFORE THE FRONT END IN CIRCUAR MANNER].
		    -> IF IT IS FULL THEN DISPLAY QUEUE IS FULL. 
		    	  -> IF THE QUEUE IS NOT FULL THEN, INSERT AN ELEMENT AT THE END OF THE QUEUE.

	2.DEQUEUE -> IT DELETE THE ELEMENT FROM CIRCULAR QUEUE AT FRONT END 
		    -> CHECK WHETHER THE QUEUE 
		    -> IF IT IS EMPTY THEN DISPLAY QUEUE IS EMPTY
			  -> IF THE QUEUE IS NOT EMPTY, THEN GET THE LAST ELEMENT AND REMOVE IT FROM THE QUEUE

	3.FRONT   -> IT RETURN THE ELEMENT IN THE FRONT
	4.REAR    -> IT RETURN THE ELEMENT IN THE REAR



4. LINKED LIST:
-> LIKE ARRAYS, A LINKED LIST IS A LINEAR DATA STRUCTURE.
-> UNLIKE ARRAYS, LINKED LIST ELEMENTS ARE NOT STORED AT A CONTIGUOUS LOCATION, THE ELEMENTS ARE LINKED USING POINTERS.
-> THEY INCLUDE A SERIES OF CONNECTED NODES. HERE, EACH NODE STORES THE DATA AND THE ADDRESS OF THE NEXT NODE.
-> IN LINKED LIST THE INSERTION OF ELEMENTS TAKES PALCES IN VARIOUS PLACES LIKE START, END AND MIDDLE.
-> IN LINKED LIST THE DELETION OF ELEMENTS TAKES PALCES.
-> IN LINKED LIST THERE IS SORTING OF ELEMENTS TAKES PALCES.



TREE:





































